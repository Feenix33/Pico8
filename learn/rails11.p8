pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
-- rails10.p8
-- another attempt at following a road and state machines
-- roads types add 16 or 100
--  +- -+- -+  > v   05 09 06 01 02
--  |- -+- -|  < ^   12 15 10 03 04
--  +_ _+_ _+  - |   08 11 07 13 14
--
--  01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
--  >  V  <  ^  +- -+ _+ +_ T -|  _|_|- --  |  +
--  right left up down back error turnxx

-- 0=black  1=dk blue  2=purple   3=dk green
-- 4=brown  5=dk grey  6=lgrey    7=white
-- 8=red    9=orange   10=yellow  11=lgreen
-- 12=lblue 13=mgrey   14=pink    15=peach
--

--
-- Train class
cars = {}
mvxy={r={1,0},l={-1,0},u={0,-1},d={0,1}}
turnr={r='d',d='l',l='u',u='r'}
turnl={r='u',d='r',l='d',u='l'}
gspds={10,5,2}

-- Gobals
debug=false
gfree=false
gdlay=0
gspd=1

dtree={
    r={'l','2','3','4','5','d','u','8','trd','tud','tru','12','r','14','tudr'},
    l={'1','2','r','4','d','6','7','u','tld','10','tlu','tud','l','14','tudl'},
    u={'1','2','3','d','r','l','7','8','tlr','tul','11','tur','13','u','tulr'},
    d={'1','u','3','4','d','6','l','r','9','tdl','trl','tdr','13','d','tdlr'},
}
--[[
chktree={
    r={ 0,-1,-1,-1,-1,  0, 0,-1, 0, 0,  0,-1, 0,-1, 0},
    l={-1,-1, 0,-1, 0, -1,-1, 0, 0,-1,  0, 0, 0,-1, 0},
    u={-1,-1,-1, 0, 0,  0,-1,-1, 0, 0, -1, 0,-1, 0, 0},
    d={-1, 0,-1,-1, 0, -1, 0, 0,-1, 0,  0, 0,-1, 0, 0},
}
]]--

function add_new_car(_x,_y)
    add(cars, {
        id=#cars+1,
        x=_x*8+2,
        y=_y*8+2,
        d='d', -- direction
        cnt=0,  -- turn countr
        ontile = mget(_x,_y),
        draw=function(self)
            rect(self.x, self.y, self.x+3, self.y+3, 15)
        end,
        dump=function(self)
            printh("id="..self.id.." xy= "..self.x..","..self.y.." d="..self.d)
        end,
        mvf=function(self)
            self.x+=mvxy[self.d][1]
            self.y+=mvxy[self.d][2]
            self.cnt=(self.cnt+1)%8
        end,
        mvr=function(self)
            self.d = turnr[self.d]
        end,
        mvl=function(self)
            self.d = turnl[self.d]
        end,
        mv=function(self)
            if self.cnt == 0 then
                self.ontile=mget(cars[1].x/8,cars[1].y/8)
                new_dir = self.decide(self)
                if #new_dir == 1 then
                    self.d = new_dir
                else
                    --printh('new_dir = '..new_dir)
                    --self.d = sub(new_dir,2,2)
                    r = flr(rnd(#new_dir-1)) + 2
                    self.d = sub(new_dir,r,r)
                    if debug then printh('self.d= '..self.d..  ' new_dir= '..new_dir..  " alt="..sub(new_dir,r,r)) end
                end
            end
            self.mvf(self)
        end,
        decide=function(self)
            local d = self.d
            local t = self.ontile % 100
            local val = dtree[d][t]
            --chktree[d][t] += 1
            if debug then printh ("decide[d="..d.."][t="..t.."] = "..val) end
            return val
        end,
    })
end

function status()
    local outstr
    outstr = "x="..cars[1].x.."/"..flr(cars[1].x/8)
    outstr = outstr.." y="..cars[1].y.."/"..flr(cars[1].y/8)
    outstr = outstr.." d="..cars[1].d
    outstr = outstr.." cnt="..cars[1].cnt
    outstr = outstr.." on="..mget(cars[1].x/8,cars[1].y/8)

    rectfill(0,118, 128,128, 0)
    print(outstr, 0, 120, 7)
 
end

function draw_grid(clr)
    clr = clr or 15
    --[[
    for x=0,127,8 do
        line(x,0, x,127, clr)
    end
    for y=0,127,8 do
        line(0, y, 127, y, clr)
    end
    ]]--
    for x=0,127,8 do
        for y=0,127,8 do
            pset(x,y,clr)
        end
    end
end

--
-- base functions
-- 

function _init()
    -- print a runtime note
    printh (stat(93)..":"..stat(94).." ---------------------------------------- ")
    -- build the map at init time
    --[[
    mset( 1, 0, 105)
    mset( 2, 0, 113)
    mset( 3, 0, 113)
    mset( 4, 0, 106)
    mset( 1, 1, 114)
    mset( 4, 1, 114)
    mset( 1, 2, 108)
    mset( 2, 2, 113)
    mset( 3, 2, 113)
    mset( 4, 2, 107)
    ]]--
    --  +- -+- -+  > v   05 09 06 01 02
    --  |- -+- -|  < ^   12 15 10 03 04
    --  +_ _+_ _+  - |   08 11 07 13 14
    local tiles = {{105, 113, 109, 113, 106,   0},
                   {114, 104, 114,   0, 112, 101},
                   {112, 111, 115, 113, 110,   0},
                   {114,   0, 114, 103, 110,   0},
                   {108, 109, 111, 113, 107,   0},
                   {  0, 102,   0,   0,   0,   0},
               }
    local y=-1
    local x=0
    local v
    for dy=1,#tiles do
        --printh('dy '..dy.."  ") --..tiles[dy])
        --printh('dx max = '..#tiles[1])
        for dx=1,#tiles[1] do
            v = tiles[dy][dx]
            --printh("mset("..(x+dx)..", "..(y+dy)..", "..v..")")
            if v > 0 then
                mset(x+dx, y+dy, tiles[dy][dx])
            end
        end
    end
    add_new_car(1,0)
end

function _update()

    if btnp(0) then
        --printh("Btn 0 left")
        gfree=false

    elseif btnp(1) then
        --printh("Btn 1 right")
        if (gfree) then gspd = (gspd % #gspds) + 1 end
        gfree=true

    elseif btnp(2) then --printh("Btn 2")
        for c in all(cars) do
            --c:mvf()
            c:mv()
        end

    elseif btnp(3) then --printh("Btn 3 left")
        printh("Btn 3 down")

    elseif btnp(4) then
        printh("Btn 4")
        for c in all(cars) do
            c:decide()
        end

    elseif btnp(5) then
        --printh("Dump")
        for c in all(cars) do
            c:dump()
        end
        --[[
        for d in all({'r','l','u','d'}) do
            for n=0,10,5 do
                printh('chk['..d..']['..(n+1)..']= '..
                       chktree[d][n+1]..' '..
                       chktree[d][n+2]..' '..
                       chktree[d][n+3]..' '..
                       chktree[d][n+4]..' '..
                       chktree[d][n+5])
            end
        end
        ]]--

    end

    if gfree then
        gdlay -= 1
        if gdlay <= 0 then
            gdlay = gspds[gspd]
            for c in all(cars) do
                c:mv()
            end
        end
    end
end

function _draw()
    cls()
    --rect(0, 0, 127, 127, 6)
    map(0, 0, 0, 0, 128, 128)
    for c in all(cars) do
        c:draw()
    end
    --draw_grid()
    status()
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000066660000000000000000000000000000000000006666000066660000000000006666000066660000666600000000000066660000666600
0000000000000000006666000000000000dddd000000000000000000006666000066660000000000006666000066660000666600000000000066660000666600
00000000666666d0006666000d666666006666000066666666666600666666000066666666666666666666006666666600666666666666660066660066666666
00000000666666d0006666000d666666006666000066666666666600666666000066666666666666666666006666666600666666666666660066660066666666
00000000666666d0006666000d666666006666000066666666666600666666000066666666666666666666006666666600666666666666660066660066666666
00000000666666d0006666000d666666006666000066666666666600666666000066666666666666666666006666666600666666666666660066660066666666
000000000000000000dddd0000000000006666000066660000666600000000000000000000666600006666000000000000666600000000000066660000666600
00000000000000000000000000000000006666000066660000666600000000000000000000666600006666000000000000666600000000000066660000666600
0000000000000000008778000000000000a77a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000077770000000000007777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000008777cc7a00777700a7cc777800cccc0000aab00000aaaa00000baa00000bb00000000000000000000000000000000000000000000000000000000000
0000000077777c770077770077c7777700c77c0000aaab0000aaaa0000baaa0000baab0000000000000000000000000000000000000000000000000000000000
0000000077777c7700c77c0077c777770077770000aaab0000baab0000baaa0000aaaa0000000000000000000000000000000000000000000000000000000000
000000008777cc7a00cccc00a7cc77780077770000aab000000bb000000baa0000aaaa0000000000000000000000000000000000000000000000000000000000
00000000000000000077770000000000007777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000a77a0000000000008778000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000666600000000000000000000000000000000000066660000666600000000000066660000666600
000000000000000000000000000000000000000000000000006666000000000000dddd0000000000000000000066660000666600000000000066660000666600
0000000000000000000000000000000000000000666666d0006666000d6666660066660000666666666666006666660000666666666666666666660066666666
0000000000000000000000000000000000000000666666d0006666000d6666660066660000666666666666006666660000666666666666666666660066666666
0000000000000000000000000000000000000000666666d0006666000d6666660066660000666666666666006666660000666666666666666666660066666666
0000000000000000000000000000000000000000666666d0006666000d6666660066660000666666666666006666660000666666666666666666660066666666
00000000000000000000000000000000000000000000000000dddd00000000000066660000666600006666000000000000000000006666000066660000000000
00000000000000000000000000000000000000000000000000000000000000000066660000666600006666000000000000000000006666000066660000000000
00666600000000000066660000666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00666600000000000066660000666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00666666666666660066660066666666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00666666666666660066660066666666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00666666666666660066660066666666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00666666666666660066660066666666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00666600000000000066660000666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00666600000000000066660000666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
